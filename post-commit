#!/bin/bash
#
# Post-commit hook that checks whether somebody else is a primary author for
# any of the files modified, and suggests a request for review on those files.

SAMENAMES_FILE=${HOME}/.gitsamenames
SAMENAMES=""
if [[ -f "${SAMENAMES_FILE}" ]]
then
	SAMENAMES=$(cat ${SAMENAMES_FILE})
fi

TARGET=${1:-HEAD}
cd $(git rev-parse --show-toplevel)
PRIMARY_AUTHORS=$(git diff-tree -r --name-only --no-commit-id ${TARGET} | python -c '# encoding=utf-8
import re
import subprocess
import sys
from collections import defaultdict

RE_BLAME = re.compile(r"^[^ ]* (.*) \((.*) \d{4}-\d{2}-\d{2} +\d+\).*")

samenames = {'"${SAMENAMES}"'}
filenames = filter(None, (line.strip() for line in sys.stdin))

Counter = lambda: defaultdict(int)

counters=defaultdict(Counter)

for filename in filenames:
    blame, _ = subprocess.Popen([
        "git", "blame",
        "--date", "short",
        "-fwCMcp",
        filename
    ], stdout=subprocess.PIPE).communicate()
    for line in blame.split("\n"):
        if not line.strip():
            continue
        match = RE_BLAME.match(line.strip())
        orig_filename, author = match.groups()
        counters[filename][samenames.get(author, author)] += 1

print "\n".join(
    "%-25s %s" % (counts[0][0], filename)
    for filename, counter in counters.iteritems()
    for counts in (sorted(counter.iteritems(), key=lambda tup: -tup[1]),)
    if counts[0][0] != "Not Committed Yet" and (len(counts) == 1
        or counts[0][1] > 10 and counts[0][1] >= counts[1][1] * 2)
)
')

ME=$(git config --get user.name)
PRIMARY_AUTHORS_NOT_ME=$(echo "$PRIMARY_AUTHORS" | grep -v "$ME")
if [[ -n "$PRIMARY_AUTHORS_NOT_ME" ]]
then
	echo "NOTE: Modified files mostly written by others; maybe ask them for code review?"
	echo
	echo "Primary author           Filename"
	echo "--------------           --------"
	echo "$PRIMARY_AUTHORS_NOT_ME"
	echo
fi
